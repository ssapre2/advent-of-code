
class StoneList:

    def __init__(self,stones,n):
        self.tracker = list()
        self.lookup = dict()
        # Initialize
        self.stones = stones
        #self.blink_count = dict.fromkeys([i for i in range(1,n+1)], 0)
        #print(self.blink_count)
        self.n = n
        # Current Stone
        self.x = 0
        # Call blink function
        #self.blink(self.stones,self.n)
        self.stone_count = list()
        for stone in stones:
            # Call blink function on each stone
            # self.x is number of stones for current blink round
            #print(f"NEW STONE: {stone} -------- stone count after {self.n} blinks = {self.stone_count}")
            self.x += self.blink(stone, self.n)


        #print(len(self.lookup))
        print(self.x)

    def find_next_number(self,stone,n):
       # print(f'Find Stone: {stone} after {self.n - n + 1} blink(s)')
        # Iterate thru blink scenarios
        if stone == 0:
            next_number = 1
            #print(f"Adding 1 @ blink {self.n-n+1}")
            #self.lookup[(next_number,n)] = 1
            return(self.blink(1,n-1))

        elif len(str(stone)) % 2 == 0:
            #print(f'Split Stone {stone}')
           return self.split(stone,n=n)
        else:
            return(self.blink(stone*2024,n-1))
            #next_number = stone * 2024
            #print(f"Adding {next_number} to lookup @ blink {self.n-n+1}")
            #self.lookup[(next_number,n)] = 1
            # Apply function to next number
            #self.blink(next_number,n=n-1)

    # Only send one stone at a time
    def blink(self,stone: int,n: int):

        # Iterate thru list of stones (numbers), add required calculation to dictionary lookup
        if n == 0:
            #print(f"Returning: {stone}")
            return 1
            #self.lookup[(stone,n)] += 1
            #self.x += 1
            #value = 1
            #return(stone)
        # Check for number in lookup
        elif (stone,n) in self.lookup:
            return self.lookup[(stone,n)]
            #self.blink(stone=self.lookup[(stone,n)],n = n-1)
            # Lookup current number  to find next stone
        else:
            # Stone not in lookup, add it 
            count = self.find_next_number(stone,n)

                # Count it, we already have the next number
                #self.blink_count[n] += 1
                #print(f"Lookup {stone} @ blink {n}")
                # Pass new number thru function
        self.lookup[(stone,n)] = count            
        return count
        #self.lookup[(stone, n)] = val 
        #return val
            
              
    # Split the stone into 2
    def split(self,stone,n):
        mid_number_str_list = list(str(stone))
        mid_pos = len(mid_number_str_list) // 2 
        left_stone = int(''.join(mid_number_str_list[mid_pos:]))
        right_stone = int(''.join(mid_number_str_list[:mid_pos]))
        return self.blink(left_stone,n= n-1) + self.blink(right_stone,n= n-1)



# To flatten list
import itertools
from datetime import datetime 

def main():
    #new_stones = StoneList(stones=[125,17],n=25)
    #new_stones = obj.blink()
   # print(new_stones.blink_count)
    #print(len(new_stones))

    # initial experiment

    #i = 1
    #init_stones = [125,17]
    # Part 1
    start = datetime.now()
    input_stones = [510613, 358, 84, 40702, 4373582, 2, 0, 1584]
    StoneList(input_stones,75)
    #print(dict(input_stones))
    end = datetime.now()
    print(f"Part 2 {end-start} seconds")

    # Part 1
    # start = datetime.now()
    
    # print(len(run_exp(input_stones=input_stones,n = 3)))
    # end = datetime.now()
    # print(f"Part 2 {end-start} seconds")


if __name__ == "__main__":
    main()